name: .NET Core Tests and Deployments

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop

jobs:
  unit_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore src/Api/Api.csproj

      # Run unit tests
      - name: Run all tests
        run: dotnet test QuickFood-Backoffice.sln --configuration Release --collect:"XPlat Code Coverage"

  code_analysis:
    runs-on: ubuntu-latest
    needs: unit_test
    steps:
      # Fazer checkout do código
      - uses: actions/checkout@v3

      # Configurar .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restaurar dependências
      - name: Restore Dependencies
        run: dotnet restore src/Api/Api.csproj

      # Cache para pacotes do SonarCloud
      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Cache para o scanner do SonarCloud
      - name: Cache SonarCloud Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Instalar o SonarCloud Scanner
      - name: Install SonarCloud Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "${DOTNET_ROOT}/tools" >> $GITHUB_PATH

      # Instalar ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Executar análise com o SonarCloud
      - name: Build and Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN_GIT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Etapa de inicialização do scanner
          dotnet-sonarscanner begin \
            /k:"SofArc6Soat_quickfood-backend-backoffice" \
            /o:"sofarc6soat" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.verbose=true \
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.cobertura.xml"

          # Construir e testar solução
          dotnet build QuickFood-Backoffice.sln --configuration Release
          dotnet test QuickFood-Backoffice.sln --configuration Release \
            --results-directory tests/Api/TestResults \
            --collect:"XPlat Code Coverage"

          # Gerar relatórios de cobertura
          reportgenerator -reports:tests/**/TestResults/coverage.cobertura.xml \
                          -targetdir:coverage-report \
                          -reporttypes:Html

          # Encerrar análise do scanner
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Fazer upload dos relatórios como artefato
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report

      # Fazer upload dos resultados de testes como artefato
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: TestResults
          path: tests/**/TestResults



  deploy:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Build application
      - name: Build application
        run: dotnet build src/Api/Api.csproj --configuration Release

      # Deploy application
      - name: Deploy application
        run: echo "Add your deploy commands here"

  smoketest:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Run smoke tests
      - name: Run smoke tests
        run: dotnet test tests/SmokeTests/SmokeTests.csproj

  publish_docker_image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: smoketest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: docker buildx build --push -t sofarc6soat/quickfood-backend-backoffice:latest -f ./src/Api/Dockerfile.publish .
